[ [ 'sin', {arg freq=0.1, phase=0, mul=1, add=0; 
	SinOsc.ar(freq, phase, mul).map + add} ], [ 'saw', {arg freq=0.1, mul=1, add=0; 
	Saw.ar(freq, mul).map + add } ], [ 'lfn2', {arg freq=0.1, mul=1, add=0; 
	LFNoise2.ar(freq).map + add } ], [ 'lfn1', {arg freq=0.1, mul=1, add=0; 
	LFNoise1.ar(freq).map + add } ], [ 'lfn0', {arg freq=0.1, mul=1, add=0; 
	LFNoise0.ar(freq).map + add } ], [ 'cspl', {arg freq=0.1, a=1, b=1.99, xi=0, mul=1, add=0; 
	CuspN.ar(freq,a,b,xi, mul).map + add} ], [ 'cspn', {arg freq=0.1, a=1, b=1.99, xi=0; CuspN.ar(freq,a,b,xi).map } ], [ 'henn', {arg freq=0.1, a=1.4, b=0.3, x0=0, x1=0, mul=1, add=0; HenonN.ar(freq,a,b,x0,x1,mul).map + add } ], [ 'henl', {arg freq=0.1, a=1.4, b=0.3, x0=0, x1=0, mul=1, add=0; HenonL.ar(freq,a,b,x0,x1,mul).map + add } ], [ 'henc', {arg freq=0.1, a=1.4, b=0.3, x0=0, x1=0, mul=1, add=0; HenonC.ar(freq,a,b,x0,x1,mul).map + add } ], [ 'lfp', {arg freq=0.1, iphase=0, width=0.5, mul=1, add=0; 
	LFPulse.ar(freq, iphase, width, mul).map + add } ], [ 'lfs', {arg freq=0.1, iphase=0; LFSaw.ar(freq, iphase).map } ], [ 'lfc', {arg freq=0.1, iphase=0, mul=1, add=0; 
	LFCub.ar(freq, iphase, mul).map + add } ], [ 'lft', {arg freq=0.1, iphase=0, mul=1, add=0; 
	LFTri.ar(freq, iphase, mul).map + add } ], [ 'ons', {arg thresh=0.1, in=1, mul=1, add=0; 
var sig, chain;
sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(512), sig);
	((Onsets.kr(chain, thresh, \rcomplex) * 2 - 1 ) * mul).map + add;} ], [ 'ons2', {arg thresh=0.1, in=1, mul=1, add=0; 
var sig, chain;
sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(512), sig);
	((Onsets.kr(chain, thresh, \wphase) * 2 - 1 ) * mul).map + add;} ], [ 'ons3', {arg thresh=0.1, in=1, mul=1, add=0; 
var sig, chain;
sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(512), sig);
	((Onsets.kr(chain, thresh, \magsum) * 2 - 1 ) * mul).map + add;} ], [ 'ons4', {arg thresh=0.1, in=1, mul=1, add=0; 
var sig, chain;
sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(512), sig);
	((Onsets.kr(chain, thresh, \power) * 2 - 1 ) * mul).map + add;} ], [ 'pch', {arg in=1, mul=1, add=0, ampThreshold=0.01, median=1, lag=0;
	var sig, chain, freq, hasFreq;
	sig = SoundIn.ar( (in-1).max(0) );
	# freq, hasFreq = Pitch.kr(sig, ampThreshold: ampThreshold, median: median).explin(20, 20000, -1, 1).lag(lag);
	(freq * mul).map + add} ], [ 'hpch', {arg in=1, mul=1, add=0, minFreq=60, maxFreq=4000, ampThreshold=0.01, median=1, lag=0;
	var sig, chain, freq, hasFreq;
	sig = SoundIn.ar( (in-1).max(0) );
	 # freq, hasFreq = Pitch.kr(sig, minFreq: minFreq, maxFreq: maxFreq, 
		ampThreshold: ampThreshold, median: median).lag(lag);
	((hasFreq * 2 - 1) * mul).map + add;} ], [ 'pch2', {arg in=1, mul=1, add=0, thresh=0.93, lag=0;
	var sig, chain, freq, hasFreq;
	sig = SoundIn.ar( (in-1).max(0) );
	# freq, hasFreq = Tartini.kr(sig, thresh).explin(20, 20000, -1, 1).lag(lag);
	(freq * mul).map + add} ], [ 'hpch2', {arg in=1, mul=1, add=0, thresh=0.93, lag=0;
	var sig, chain, freq, hasFreq, minFreq, maxFreq;
	sig = SoundIn.ar( (in-1).max(0) );
	# freq, hasFreq = Tartini.kr(sig, thresh).lag(lag);
	((hasFreq * 2 - 1) * mul).map + add} ], [ 'loud', {arg in=1, mul=1, add=0, lag=0; 
var sig, chain, loudness;
sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(1024), sig);
loudness =	Loudness.kr(chain).min(64).max(0).lag(lag);
(loudness.linlin(0,64,-1,1) * mul).map + add;} ], [ 'loudt', {arg track=1, mul=1, add=0, lag=0; 
var sig, chain, loudness;
sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(1024), sig);
	loudness =	Loudness.kr(chain).min(64).max(0).lag(lag);
(loudness.linlin(0,64,-1,1) * mul).map + add;} ], [ 'onst', {arg thresh=0.1, track=1, mul=1, add=0; 
var sig, chain;
sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(512), sig);
	((Onsets.kr(chain, thresh, \rcomplex) * 2 - 1 ) * mul).map + add;} ], [ 'ons2t', {arg thresh=0.1, track=1, mul=1, add=0; 
var sig, chain;
sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(512), sig);
	((Onsets.kr(chain, thresh, \wphase) * 2 - 1 ) * mul).map + add;} ], [ 'ons3t', {arg thresh=0.1, track=1, mul=1, add=0; 
var sig, chain;
sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(512), sig);
	((Onsets.kr(chain, thresh, \magsum) * 2 - 1 ) * mul).map + add;} ], [ 'ons4t', {arg thresh=0.1, track=1, mul=1, add=0; 
var sig, chain;
sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(512), sig);
	((Onsets.kr(chain, thresh, \power) * 2 - 1 ) * mul).map + add;} ], [ 'pcht', {arg track=1, mul=1, add=0, ampThreshold=0.01, median=1, lag=0;
	var sig, chain, freq, hasFreq;
	sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
	# freq, hasFreq = Pitch.kr(sig, ampThreshold: ampThreshold, median: median).explin(20, 20000, -1, 1).lag(lag);
	(freq * mul).map + add} ], [ 'hpcht', {arg track=1, mul=1, add=0, ampThreshold=0.01, median=1, lag=0;
	var sig, chain, freq, hasFreq;
	sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
	# freq, hasFreq = Pitch.kr(sig, ampThreshold: ampThreshold, median: median).lag(lag);
	((hasFreq * 2 - 1) * mul).map + add;} ], [ 'pch2t', {arg track=1, mul=1, add=0, thresh=0.93, lag=0;
	var sig, chain, freq, hasFreq;
	sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
	# freq, hasFreq = Tartini.kr(sig, thresh).explin(20, 20000, -1, 1).lag(lag);
	(freq * mul).map + add} ], [ 'hpch2t', {arg track=1, mul=1, add=0, thresh=0.93, lag=0;
	var sig, chain, freq, hasFreq;
	sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
	 # freq, hasFreq = Tartini.kr(sig, thresh).lag(lag);
	((hasFreq * 2 - 1) * mul).map + add} ], [ 'rms', {arg in=1, mul=1, add=0;
	var sig, rms;
	sig = SoundIn.ar( (in-1).max(0) );
	rms = RMS.ar(sig).min(1).max(0).linlin(0, 1, -1, 1);
	(rms * mul).map + add} ], [ 'amp', {arg in=1, attack=0.01, release=0.01, mul=1, add=0, lag=0;
	var sig, amp;
	sig = SoundIn.ar( (in-1).max(0) );
	amp = Amplitude.ar(sig, attack, release).min(1).max(0).linlin(0, 1, -1, 1).lag(lag);
	(amp * mul).map + add} ], [ 'rmst', {arg track=1, mul=1, add=0;
	var sig, rms;
		sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
	rms = RMS.ar(sig).min(1).max(0).linlin(0, 1, -1, 1);
	(rms * mul).map + add} ], [ 'ampt', {arg track=1, attack=0.01, release=0.01, mul=1, add=0, lag=0;
	var sig, amp;
	sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
	amp = Amplitude.ar(sig, attack, release).min(1).max(0).linlin(0, 1, -1, 1).lag(lag);
	(amp * mul).map + add} ], [ 'diss', {arg in=1, mul=1, add=0, lag=0; 
var sig, chain, diss;
sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(2048), sig);
	diss =	SensoryDissonance.kr(chain).min(1).max(0).lag(lag);
(diss.linlin(0,1,-1,1) * mul).map + add;} ], [ 'disst', {arg track=1, mul=1, add=0, lag=0; 
var sig, chain, diss;
sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(2048), sig);
	diss =	SensoryDissonance.kr(chain).min(1).max(0).lag(lag);
(diss.linlin(0,1,-1,1) * mul).map + add;} ], [ 'cent', {arg in=1, mul=1, add=0, lag=0; 
var sig, chain, cent;
sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(2048), sig);
cent =	SpecCentroid.kr(chain).min(20000).max(20).lag(lag);
(cent.explin(20,20000,-1,1) * mul).map + add;} ], [ 'centt', {arg track=1, mul=1, add=0, lag=0; 
var sig, chain, cent;
sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(2048), sig);
cent =	SpecCentroid.kr(chain).lag(lag);
(cent.explin(20,20000,-1,1) * mul).map + add;} ], [ 'flat', {arg in=1, mul=1, add=0, lag=0; 
var sig, chain, flat;
sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(2048), sig);
	flat =	SpecFlatness.kr(chain).lag(lag);
(flat.linlin(0,1,-1,1) * mul).map + add;} ], [ 'flatt', {arg track=1, mul=1, add=0, lag=0; 
var sig, chain, flat;
	sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(2048), sig);
	flat =	SpecFlatness.kr(chain).lag(lag);
(flat.linlin(0,1,-1,1) * mul).map + add;} ], [ 'pcile', {arg in=1, fraction=0.9, mul=1, add=0, lag=0; 
var sig, chain, pcile;
sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(2048), sig);
pcile =	SpecPcile.kr(chain, fraction).lag(lag);
(pcile.explin(20,20000,-1,1) * mul).map + add;} ], [ 'pcilet', {arg track=1, fraction=0.9, mul=1, add=0, lag=0; 
var sig, chain, pcile;
sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(2048), sig);
pcile =	SpecPcile.kr(chain, fraction).lag(lag);
(pcile.explin(20,20000,-1,1) * mul).map + add;} ], [ 'entr', {arg in=1, mul=1, add=0, lag=0; 
var sig, chain, entropy;
sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(2048), sig);
entropy=SpectralEntropy.kr(chain,2048,1); 
(entropy.linlin(0,100,-1,1) * mul).map + add;} ], [ 'entrt', {arg track=1, mul=1, add=0, lag=0; 
var sig, chain, entropy;
sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(2048), sig);
entropy=SpectralEntropy.kr(chain,2048,1); 
(entropy.linlin(0,100,-1,1) * mul).map + add;} ], [ 'mel1t', {arg track=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[0];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel2t', {arg track=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[1];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel3t', {arg track=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[2];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel4t', {arg track=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[3];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel5t', {arg track=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[4];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel6t', {arg track=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[5];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel7t', {arg track=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[6];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel8t', {arg track=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[7];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel9t', {arg track=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[8];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel10t', {arg track=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[9];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel12t', {arg track=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[11];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel13t', {arg track=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[12];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel11t', {arg track=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[10];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel1', {arg in=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[0];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel2', {arg in=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[1];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel3', {arg in=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[2];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel4', {arg in=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[3];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel5', {arg in=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[4];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel6', {arg in=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[5];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel7', {arg in=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[6];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel8', {arg in=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[7];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel9', {arg in=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[8];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel10', {arg in=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[9];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel11', {arg in=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[10];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel12', {arg in=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[11];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'mel13', {arg in=1, mul=1, add=0, lag=0; 
var sig, chain, mel;
	sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(1024), sig);
	mel =	MFCC.kr(chain)[12];
(mel.linlin(0,1,-1,1) * mul).map + add;} ], [ 'pwrt', {arg track=1, mul=1, add=0, lag=0; 
var sig, chain, power;
sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(2048), sig);
power=FFTPower.kr(chain).lag(lag); 
(power.linlin(0,11,-1,1) * mul).map + add;} ], [ 'pwr', {arg in=1, mul=1, add=0, lag=0; 
var sig, chain, power;
sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(2048), sig);
power=FFTPower.kr(chain).lag(lag); 
(power.linlin(0,11,-1,1) * mul).map + add;} ], [ 'flux', {arg in=1, mul=1, add=0, lag=0; 
var sig, chain, flux;
sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(2048), sig);
flux=FFTFlux.kr(chain).lag(lag); 
(flux.linlin(0,1,-1,1) * mul).map + add;} ], [ 'fluxt', {arg track=1, mul=1, add=0, lag=0; 
var sig, chain, flux;
	sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(2048), sig);
flux=FFTFlux.kr(chain).lag(lag); 
(flux.linlin(0,1,-1,1) * mul).map + add;} ], [ 'slopet', {arg track=1, mul=1, add=0, lag=0; 
var sig, chain, val;
	sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(2048), sig);
val = FFTSlope.kr(chain);
((val * 10000).abs.linlin(0,10,-1,1) * mul).map + add;} ], [ 'slope', {arg in=1, mul=1, add=0, lag=0; 
var sig, chain, val;
	sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(2048), sig);
val = FFTSlope.kr(chain);
((val * 10000).abs.linlin(0,10,-1,1) * mul).map + add;} ], [ 'peak', {arg in=1, mul=1, add=0, lag=0; 
var sig, chain, freq, mag;
sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(2048), sig);
# freq, mag = FFTPeak.kr(chain);
(freq.explin(20,20000,-1,1) * mul).map + add;} ], [ 'peakt', {arg track=1, mul=1, add=0, lag=0; 
var sig, chain, freq, mag;
	sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(2048), sig);
# freq, mag = FFTPeak.kr(chain);
(freq.explin(20,20000,-1,1) * mul).map + add;} ], [ 'crestt', {arg track=1, mul=1, add=0, lag=0; 
var sig, chain, crest;
	sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(2048), sig);
	crest = FFTCrest.kr(chain).lag(lag);
(crest.linlin(5,850,-1,1) * mul).map + add;} ], [ 'crest', {arg in=1, mul=1, add=0, lag=0; 
var sig, chain, crest;
sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(2048), sig);
	crest = FFTCrest.kr(chain).lag(lag);
(crest.linlin(5,850,-1,1) * mul).map + add;} ], [ 'key', {arg in=1, mul=1, add=0; 
var sig, chain, crest;
sig = SoundIn.ar( (in-1).max(0) );
chain = FFT(LocalBuf(4096), sig);
crest = KeyTrack.kr(chain).poll(1);
(crest.linlin(0,23,-1,1) * mul).map + add;} ], [ 'keyt', {arg track=1, mul=1, add=0; 
var sig, chain, crest;
sig = Select.ar(track-1, [Ndef(\track1).ar, Ndef(\track2).ar, Ndef(\track3).ar, Ndef(\track4).ar, Ndef(\track5).ar, Ndef(\track6).ar, Ndef(\track7).ar, Ndef(\track8).ar]);
chain = FFT(LocalBuf(4096), sig);
crest = KeyTrack.kr(chain);
(crest.linlin(0,23,-1,1) * mul).map + add;} ] ]