class:: Radicles
summary:: Main Radicles Class
related:: Classes/PostWindow, Classes/Window
categories:: Libraries>Radicles

Description::

Main Radicles class

Examples::

code::

//RADICLES MAIN
doc //created new code document
fade //post radicles fadeTime
fade 1 //set fadeTime to 1

//libraries
imp Main //loads library
imp [Main, FedPlugs] //loads an array of libraries
imp All //loads all libraries

//server
boot //boot server

//ASSEMBLAGE
//assemblage start
asm 1 //trackNum (mixer doesn't work)
asm 2 1 // trackNum, busNum
asm 2 1 1 //trackNum, busNum, chanNum
asm 2 1 [[1,2],2,2] //trackNum, busNum, chanNumArr
asm 2 1 1 pan2 //trackNum, busNum, chanNum, spaceType
asm 2 1 [1,2,2] bal2 //trackNum, busNum, chanNumArr
//mix UI
mix
nomix

//mixer
mixnames
prec //prepare recording
rec //record
srec //start recording
t add //add track
b add //add bus
t add 2 ///adds stereo track
b add 1 ///adds mono bus
t addn 2 //adds 2 tracks
b addn 2 2 //adds two stereo buses
t rmv //remove track
b rmv //remove bus
t rmvn 2 //remove 2 tracks
b rmvn [2,4] //remove tracks 2 and 4

//mix control:
vol t 1 -20
vollag t 1 0.1
pan b 1 -0.5
panlag b 1 1
trim t 2 -10
trimlag 2 1
//and
vol 1 -10
vollag 1 -10
pan 7 -0.5
panlag 7 1
trim 1 -10
trimlag 1 1
//with dashes for more tracks
vol t 1-6 -20
vollag t 1-3 0.1
pan b 1-3 -0.5
panlag b 1-3 1 1
trim t 1-3 -10
trimlag t 1-3 1
vol 1-6 -10
vollag 1-6 -10
pan 1-6 -1
panlag 1-6 1
trim 1-6 -10
trimlag 1-6 2
//with arrays for specific tracks
vol t [1,3,5] -20
vollag t [1,3,5] 0.1
pan b [1,3] -0.5
panlag b [1,3] 1
trim t [1,3] -10
trimlag t [1,3] 1
vol [1,2,4,6] -10
vollag [1,2,4,6] -10
pan [1,2,4,6] -0.5
panlag [1,2,4,6] 1
//bulks
vol t 0 //all tracks to 0
vol b 0 //all buses to 0
vol m 0 //master to 0
vol 0 //all tracks to 0
pan t 0.5 //all tracks to 0
panlag 1 //lag all pans to 1
trim t -10
trimlag 1 //lag all trims to 1

/* CHECK REMOVING BUSES - BUG?*/
asm rmvsnd track 1 2
asm snd track 1 0 //remove track 1, bus 1
asm snd track 1 1 0 //remove track 1, bus 1
asm snd track 1 2 0 //remove track 1, bus 2

//sends:
snd t 1 1 //send in track 1, slot 1, bus 1
snd t 1 2 2 //send in track 1, slot 2, bus 2
snd t 1 2 2 -10 //send in track 1, slot 2, bus 2, vol -10
snd 2 1
snd 2 2 2
snd 2 2 2 -10
sndry t 2 2 2 //send (no master) in track 2, slot 2, bus 2
sndry 2 2 2
sndry 2 2 2 -10
setsnd t 1 0 //set track 1, val 0
setsnd t 1 1 0 //set track 1, slot 1, val 0
setsnd t 1 1 0 1 //set track 1, slot 1, val 0, lag 1
setsnd 2 2 -10 //set mixtrack 2, slot 2, val
setsnd 2 2 -10 1 //set mixtrack 2, slot 2, val, lag

//fxs
fx t 1 pch
fx t 1 2 harm
fx b 1 pch [0, 0.5, 1, 0.1]
fx b 1 2 harm [pitchRatio1, 0.5, pitchRatio2, 1.5]
fx 1 pch
fx 1 2 pch
fx m pch //set fx pch to master slot 1
fx m 2 harm //set fx harm to master slot 2
fxset t 1 1
fxset t 1 1 1
fxset t 1 1 1 0.5
fxset t 1 1 pitchRatio 0.5
fxset m 1
fxset m 1 1 //try this
fxset m 1 1 0.5
fxset m 1 pitchRatio 0.5
fxset m 1 [1,1.8,2,0.8]
fxset m 1 2 [1,1.8,2,0.8]
fxset t 1 1 [1,1.8,2,0.8]

fxset 1 1 //with mixtrack num
fxset 1 1 1
fxset 1 1 1 0.5
fxset 1 1 pitchRatio 0.5
fxset 1 1 [1,0.8,2,1.0]
fxs //posts available effects
setfx //posts active effects
setfx 1
setfx 1 1
setfx 1 1 0.5
setfx 1 pitchRatio 0.5

//lags
fxlag t 1 1
fxlag t 1 1 1
fxlag t 1 1 1 0.5
fxlag t 1 1 pitchRatio 0.5
fxlag m 1
fxlag m 1 1 //try this
fxlag m 1 1 0.5
fxlag m 1 pitchRatio 0.5
fxlag m 1 [1,1.8,2,0.8]
fxlag m 1 2 [1,1.8,2,0.8]
fxlag t 1 1 [1,1.8,2,0.8]
fxlag 1 1 //with mixtrack num
fxlag 1 1 1
fxlag 1 1 1 0.5
fxlag 1 1 pitchRatio 0.5
fxlag 1 1 [1,0.8,2,1.0]
lagfx 1
lagfx 1 1
lagfx 1 1 0.5
lagfx 1 pitchRatio 0.5
fxlagn t 1 2 10 //lag all parameters in filter
fxlagn [[track,1,1,[1,2,2,1.1]], [track,1,2,[1,0.8,2,1.1]]]//array of tracks to lag
//remove filters
fxclear t 1
fxclear t 1 2
fxclear 1 1 //multitrack
clearfx 1
//getspec
fxgetspec t 1 1 1
fxgetspec t 1 1 pitchRatio
fxgetspec m 1 1
fxgetspec m 1 pitchRatio
fxgetspec 1 1
fxgetspec 1 pitchRatio
getfxspec 1 1
getfxspec 1 pitchRatio

//get fx information
fxget m 1
fxget t 1
fxget t 1 1
fxget m 1 1
fxget m 1 pitchRatio
fxget t 1 1 1
fxget t 1 1 pitchRatio
fxgetlag m 1
fxgetlag t 1 1
fxget 1 //multitrack num
fxget 1 1
fxget 1 1 1
fxget 1 1 pitchRatio
fxgetlag 1
fxgetlag 1 1
getfx 1
getfx 1 1
getfx 1 pitchRatio
getlagfx 1

//mixer buttons
mute t 1
unmute t 1
recen t 1
recdis t 1
solo t 1
unsolo 1

//mixer I/Os
inmenu 1 2
getinmenu 1
getinmenu t 1
outmenu 1 1 //mixTrack, master as out
outmenu t 1 0 //0 = not master, 1 = master
getoutmenu 1
getoutmenu t 1

dirinrec [0,1]
mapouts [1,2]


//BLOCKS
blk add
blk clock
blk ply
blk bpm
blk sstart
blk ndef
blk blocks
blk clear

blk add 2 //channels (adds one block with specified channels)
blk addn 4 //number (adds the given number of blocks)
blk remove 1 //block (removes block 1)
blk stop 1 //block (stops block 1)
blk bpm 1 //sets bpm to 1
blk tempo 1 //sets bpm to 1
blk sdiv 2 //divitions by 2

blk addn 2 2 //number, channels (adds 2 blocks of 2 channels)
blk stop 1 0.5 //block, fadeOut (stops block 1 with 0.5 fade)

blk play 1 sine //block, blockName (play block 1 with sine synthdef)
blk ply 1 sine //block, blockName (play block 1 with sine synthdef)
blk ply 1 sine [freq 400] //block, blockName (play block 1 with sine synthdef) with extraArgs
blk ply 1 pattern nobuf test1
blk ply 1 pattern nobuf [[note, seq, [10, 6, 2, 2]], [dur, 0.5], [instrument, perkysine]]
blk ply 1 play marilyn1 [rate, 1.2, amp, 0.8]
blk ply 1 loop marilyn1 [rate, 0.8, amp, 0.8]

//shortcuts
pl 1 marilyn1 //play
lp 1 marilyn1 //loop
pl 1 marilyn1 [1, 0.9] //play w/ extraArgs
lp 1 marilyn1 [1, 1.1] //loop w/ extraArgs
in 2 <> blk 1 //audio input 2 to block 1
in 2 1 //same as above: audio input 2 to block 1
st 1 //stop block 1
st 1 2 //stop block 1 with fade of 2 secs
st 1-4 //stop blocks 1 to 4
st 1-4 2 //stop blocks 1 to 4 with fade of 2 secs
st [2,4] //stop blocks 2 and 4
st [2,4] 2 //stop blocks 2 and 4 with fade of 2 secs

blkn 4 //add 4 blocks
blkn 4 2 //add 4 blocks of 2 channels

//before pattern
blk clock
blk tempo 80

pn 1 test1
pn 2 [[note, seq, [10, 6, 2, 2]], [dur, 0.5], [instrument, perkysine]]

//setting blocks
blksetn 1 [freq, 10]
blklagn 1 [freq, 1]
blkxsetn 1 [freq, 10]

//routing
blk 1 <> 1 //rounting? block 1 into track 1 str str num str num
blk 2-4 <> 2 //blocks 2,3,4 into track 2
blk 1-4 <> 2-5 //blocks 1,2,3,4 insto tracks 2,3,4,5

ndef perkySine <> 2 //ndef called perkySine goes into track 2


//MODULATION
mods //list of mod types
modspec //list of mod spec types

//base mods
mod play1 freq sin [200,400]
mod play1 freq sin freq1
mod play1 freq sin freq1 [freq, 1]

//check upmap -> currently not working with default value. fix modmap so that
unmod play1 freq
unmod play1 freq 1000

getmods

unmod 1
unmod 1 100

//fx mods
fxset t 1 2 1 sin //mod
fxset t 1 2 pitchRatio sin_(freq, 1, mul: 0.5) //mod with extraArgs
fxset m 2 1 sin //mod
fxset m 2 pitchRatio sin //mod
fxset 1 1 1 sin //mod
fxset 1 1 pitchRatio sin_(freq, 10) //mod
setfx 1 1 sin
setfx 1 pitchRatio sin_(freq, 2)

//change mod values
modfxget t 1 2 pitchRatio
modfxget t 1 2 1
modfxget m 2 pitchRatio
modfxget m 2 1
modfxget 1 1
modfxget 1 pitchRatio
modgetfx 1 1
modgetfx 1 pitchRatio
modfxset t 1 2 pitchRatio [freq, 1, mul, 0.1]
modfxset t 1 2 1 [freq, 1]
modfxset m 2 pitchRatio [freq, 1]
modfxset m 2 1 [freq, 1]
modfxset 1 1 [freq, 1]
modfxset 1 pitchRatio [freq, 1]
modsetfx 1 1 [freq, 1]
modsetfx 1 pitchRatio [freq, 1]
//unmodfxs:
unmodfx t 1 2 pitchRatio
unmodfx t 1 2 1
unmodfx m 2 pitchRatio
unmodfx m 2 1
unmodfx 1 1
unmodfx 1 pitchRatio
fxunmod 1 1
fxunmod 1 pitchRatio

//continue here
blkset 1 1 lfn1_(freq, 10) //mod
blkset 1 rate sin //mod
blkgetspec 1 1 //posts spec
blkgetspec rate 1 //posts spec

modblkget 1 rate
modblkset 1 rate [freq, 1]
unmodblk 1 1
unmodblk 1 rate

//mixer mods
vol t 1 sin_(freq, 10)
pan b 1 sin
trim t 2 sin
vol 1 sin_(freq, 10)
pan 7 sin
trim 1 sin
//with dashes for more tracks
vol t 1-6 sin_(freq, 3)
pan b 1-3 sin
trim t 1-3 sin
vol 1-6 sin_(freq, 3)
pan 1-6 sin
trim 1-6 sin
//with arrays for specific tracks
vol t [1,3,5] sin_(freq, 3)
pan b [1,3] sin
trim t [1,3] sin
vol [1,2,4,6] sin_(freq, 3)
pan [1,2,4,6] sin
//bulks
vol t sin_(freq, 3) //all tracks to sin
vol b sin //all buses to sin
vol m sin //master to sin
pan t sin //all tracks to sin
trim t sin
//not implemented yet:
modvolget
modvolset
//etc

//send mods
setsnd t 1 sin_(freq, 1)
setsnd t 1 1 sin //set track 1, slot 1, mod
setsnd 2 sin_(freq, 1) //set mixtrack 2, slot 1, mod
setsnd 2 2 sin_(freq, 1) //set mixtrack 2, slot 2, mod
//get and set send mods
modsndget t 1
modsndget t 1 1
modsndget 1
modsndget 1 2
modsndset t 1 [freq, 1]
modsndset t 1 1 [freq, 1]
modsndset 1 [freq, 1]
modsndset 1 2 [freq, 1]
//unmods
unmodsnd t 1 //unmod send at track 1 slot 1
unmodsnd 1 //unmod send at mixtrack 1 slot 1
unmodsnd t 1 2 //unmod track 1 slot 2
unmodsnd 1 2 //unmod mixtrack 1 slot 2


//NDEF DIRECT
ndefset track1 [freq, 1]
ndefset lag 1 //lag all values of ndef
ndefset lag 1 1 //lag all values of ndef
ndefset lag 1 pitchRatio //lag all values of ndef

//associations
//this are expressed between round brackets "()"
//when there is an arrow "->", then first statment is abstracted into second statment
//$n1, $s1, $a1 and $f1 are variables specifying if its a number, string, array, function
(fx $n1 pch -> pch $n1) //therefore here "pch 1", will be the same as and evaluate "fx 1 pch"
(fede = fxset 1 1 0.5) //assign the cmd fxset 1 1 0.5 to the abstration "fede"
//hid connect
(midion 1 <> fx 1 pch) //midi noteOn num 1 will triger cmd "fx 1 pch"
(midicc 6 <> fxset 1 1 1 $) //midicc num 6 will change $ val within cmd "fxset 1 1 1 val"
(midicc 6 [0.5,2] <> fxset 1 1 1 $) //same but specified as array is the spec
//some work to do on osc and hid with this
(osc chat 127.0.0.1 57120) <> fxset 1 1 1 $)
//make sure that worked:
m = NetAddr("127.0.0.1", 57120);
m.sendMsg("/chat", 0.1);

//NEW FEATURES
//implement features
//queries
getvol
getpan
gettrim

//ideas for Tdef implementation as loop?
l{rrand(0.1,2).postln}{0.1} //loop
l{[rrand(0.1,2), 0.2]}{[0.1,2]} //loop
t{rrand(0.1,2).postln}{0.1} //do once
t{[rrand(0.1,2), 0.2]}{[0.1,2]} //do once
//ideas of variable associations
(~a1 = {rrand(0.1,4.0)});
vol 1 ~a1

//revise buffer freeing when same buffer...

//don't implement yet:
modfxset t 1 2 [freq, 10]
modfxset t 1 pitchRatio [freq, 10]
modfxset 1 2 [freq, 10]
modfxset 1 pitchRatio [freq, 10]
modsetfx 1 1 [freq, 1]

::
